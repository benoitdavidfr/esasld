title: vocabulaire RDF
source:
  - https://www.w3.org/TR/rdf11-primer/
  - https://www.w3.org/TR/rdf-schema/
  - https://www.w3.org/TR/json-ld11/
rdf:
  dataModel:
    intro: |
      RDF allows us to make statements about resources. The format of these statements is simple
      A statement always has the following structure:
          <subject> <predicate> <object>
      An RDF statement expresses a relationship between two resources. The subject and the object represent
      the two resources being related; the predicate represents the nature of their relationship.
      The relationship is phrased in a directional way (from subject to object) and is called in RDF a property. 
      Because RDF statements consist of three elements they are called **triples**. 
      In the next three subsections we discuss the three types of RDF data that occur in triples:
        IRIs, literals and blank nodes.
    IRIs: |
      An IRI identifies a resource.
      The notion of IRI is a generalization of URI (Uniform Resource Identifier), allowing non-ASCII characters
      to be used in the IRI character string. IRIs are specified in RFC 3987 [RFC3987].
      IRIs can appear in all three positions of a triple.
    Literals: |
      Literals are basic values that are not IRIs.
      Literals are associated with a datatype enabling such values to be parsed and interpreted correctly.
      String literals can optionally be associated with a language tag.
      Literals may only appear in the object position of a triple.
    Datatypes: https://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/#section-Datatypes
    BlankNodes: |
      IRIs and literals together provide the basic material for writing down RDF statements.
      In addition, it is sometimes handy to be able to talk about resources without bothering to use a global identifier.
      A resource without a global identifier, such as the painting's cypress tree, can be represented in RDF by a blank node.
      Blank nodes are like simple variables in algebra; they represent some thing without saying what their value is.
      Blank nodes can appear in the subject and object position of a triple.
      They can be used to denote resources without explicitly naming them with an IRI.
    graphs: |
      A graph is a group of statements.
      An RDF dataset may have multiple named graphs and at most one unnamed ("default") graph.
rdfs:
  classes:
    rdfs:Resource:
      definition: |
        All things described by RDF are called resources, and are instances of the class rdfs:Resource.
        This is the class of everything.
  properties:
    rdfs:label:
      definition: provide a human-readable version of a resource's name.
      rdfs:domain: rdfs:Resource
      rdfs:range: rdfs:Literal
    rdfs:comment:
      definition: provide a human-readable description of a resource.
      rdfs:domain: rdfs:Resource
      rdfs:range: rdfs:Literal

    
json-ld:
  Expansion: |
    Expansion is the algorithm that removes context.
    Before performing any other transformations on a JSON-LD document, it is easiest to remove any context
    from it and to make data structures more regular.
  Compaction: |
    While expansion removes context from a given input, compaction's primary function is to perform the opposite operation: to express a given input according to a particular context. Compaction applies a context that specifically tailors the way information is expressed for a particular person or application. This simplifies applications that consume JSON or JSON-LD by expressing the data in application-specific terms, and it makes the data easier to read by humans.
    Compaction uses a developer-supplied context to shorten IRIs to terms or compact IRIs and JSON-LD values expressed in expanded form to simple values such as strings or numbers.
  Flattening: |
    While expansion ensures that a document is in a uniform structure, flattening goes a step further to ensure that the shape of the data is deterministic. In expanded documents, the properties of a single node may be spread across a number of different node objects. By flattening a document, all properties of a node are collected in a single node object and all blank nodes are labeled with a blank node identifier. This may drastically simplify the code required to process JSON-LD data in certain applications.
  Framing: |
    C'est l'inverse de Flattening.
traductions:
  Expansion: l'ago d'expansion, un graphe épandu (qui a fait l'objet d'une expansion), supprime le contexte
  Compaction: l'algo de compactage, un graphe compacté = qui a fait l'objet d'un compactage, applique un contexte
  Flattening: l'algo d'Aplanissement, un graphe aplani (consiste à  remplacer les sous-ressources par des noeuds blancs)
  Framing: l'algo d'imbrication, un graphe imbriqué (consiste à remplacer certaines réf. par les ressources référencées)
